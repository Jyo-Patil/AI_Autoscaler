name: deploy

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION || 'us-east-1' }}
  ECR_REPOSITORY: predictive-autoscaler         # must match Terraform
  IMAGE_TAG: latest                             # override if you want versioned tags

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      #################################################################
      # 1. Checkout repository
      #################################################################
      - name: Checkout code
        uses: actions/checkout@v4

      #################################################################
      # 2. Install Terraform
      #################################################################
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      #################################################################
      # 3. Set up Python (optional; used for small zip + build tooling)
      #################################################################
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      #################################################################
      # 4. OPTIONAL: Build small Lambda zip (kept for reference/testing)
      #    NOTE: This zip is NOT used for deployment if you're using Docker.
      #################################################################
      - name: Install dependencies and package Lambda (zip, optional)
        run: |
          cd lambda
          python -m pip install --upgrade pip
          pip install -r requirements.txt -t .
          zip -r ../lambda.zip .

      - name: Verify Lambda package
        run: ls -lh lambda.zip

      #################################################################
      # 5. Configure AWS credentials (so we can push to ECR, run Terraform)
      #################################################################
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      #################################################################
      # 6. Terraform Init
      #################################################################
      - name: Terraform Init
        run: terraform init
        working-directory: terraform

      #################################################################
      # 7. Pre-create ECR repo (Terraform targeted apply)
      #    Ensures repo exists BEFORE we build & push the Docker image.
      #################################################################
      - name: Terraform Apply (ECR only)
        run: terraform apply -auto-approve -target=aws_ecr_repository.predictive_repo
        working-directory: terraform

      #################################################################
      # 8. Get ECR repo URI from Terraform output
      #################################################################
      - name: Get ECR Repo URL
        id: getecr
        run: |
          terraform output -raw predictive_repo_url > ecr_url.txt
          echo "repo_url=$(cat ecr_url.txt)" >> $GITHUB_OUTPUT
        working-directory: terraform

      #################################################################
      # 9. Login to Amazon ECR
      #################################################################
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      #################################################################
      # 10. Build & push Docker image for Lambda
      #################################################################
      - name: Build, tag, and push Lambda Docker image
        env:
          ECR_REPO: ${{ steps.getecr.outputs.repo_url }}
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          cd lambda_docker
          if [ -z "$ECR_REPO" ]; then
            echo "ECR repo URL not found in Terraform output. Falling back to manual construction."
            ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
            ECR_REPO="$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}"
          fi

          echo "Using ECR_REPO=$ECR_REPO"

          # build image (context = lambda_docker/)

          docker build -t $ECR_REPO:$IMAGE_TAG lambda_docker

          # push image
          docker push $ECR_REPO:$IMAGE_TAG

      #################################################################
      # 11. Full Terraform Plan (now repo + image exist)
      #################################################################
      - name: Terraform Plan
        run: terraform plan -var="lambda_image_tag=${{ env.IMAGE_TAG }}"
        working-directory: terraform

      #################################################################
      # 12. Full Terraform Apply (deploy Lambda using container image)
      #################################################################
      - name: Terraform Apply
        run: terraform apply -auto-approve -var="lambda_image_tag=${{ env.IMAGE_TAG }}"
        working-directory: terraform

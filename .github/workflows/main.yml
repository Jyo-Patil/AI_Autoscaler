name: deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
         terraform_version: latest 

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies and zip lambda
        run: |
          cd lambda
          python -m venv penv
          source penv/bin/activate
          pip install -r requirements.txt
          zip -r ../lambda.zip .

      # - name: Package Lambda
      #   run: |
      #     cd lambda
      #     zip -r ../lambda.zip .
          

      - name: Terraform Init
        run: terraform init
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}    

      - name: Terraform Apply
        run: terraform destroy -auto-approve
        working-directory: terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}







# name: build and deploy

# on:
#   push:
#     branches:
#       - "develop"
#       - "main"

# jobs:
#   build:
    
#     name: Build Image
#     runs-on: ubuntu-latest

    
#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:

#     - name: Check out code
#       uses: actions/checkout@v2
#     - name: Install Terraform
#       uses: hashicorp/setup-terraform@v3
#       with:
#          terraform_version: latest   
#     - name: Install kubectl
#       uses: azure/setup-kubectl@v2.0
#       with:
#         version: 'v1.24.0' # default is latest stable
#       id: install  
    
#     - name: Install Helm
#       uses: azure/setup-helm@v1
  
    
#     - name: Test with Checkov
#       id: checkov
#       uses: bridgecrewio/checkov-action@master
#       with:
#           directory: Eks_cluster
#           framework: terraform 
#           soft_fail: true
#     - name: Configure AWS credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ${{ secrets.REGION }}
#     - name: terraform initialization
#       run: cd Eks_cluster && terraform init 
#     - name: terraform deployment
#       run: cd Eks_cluster && terraform destroy -auto-approve        

    
#     # - name: Login to Amazon ECR
#     #   id: login-ecr
#     #   uses: aws-actions/amazon-ecr-login@v1

#     # - name: Build, tag, and push image to Amazon ECR
#     #   env:
#     #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#     #     ECR_REPOSITORY: nodeappdemo1
#     #     IMAGE_TAG: latest
#     #   run: |

#     #     # docker pull tutum/hello-world
#     #     # docker tag tutum/hello-world:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#     #     # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#     #     cd Login_Express_App-master
#     #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#     #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#     #     docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
#     #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
#     #     #docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

#     # - name: Update kube config
#     #   run: 
        
#     #     aws eks update-kubeconfig --name practice-cluster --region us-east-1
    
#     # - name: Deploy to EKS
#     #   run: |
#     #    cd Login_Express_App-master
#     #    kubectl apply -f git-deployment.yml
   
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push docker image to Amazon ECR
#       env:
#         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         REPOSITORY: nodeappdemo1
#         IMAGE_TAG: latest
#       run: |
#         cd practice_app
#         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#     - name: Update kube config
#       run: aws eks update-kubeconfig --name primuslearning
    
#     - name: Deploy to EKS
#       run: |
#         cd practice_app
#         kubectl apply -f deployment.yaml
#         kubectl apply -f service.yaml
#     # - name: Send mail
#     #   if: always()
#     #   uses: dawidd6/action-send-mail@v2
#     #   with:
#     # # mail server settings
#     #       server_address: smtp.gmail.com
#     #       server_port: 465
#     # # user credentials
#     #       username: ${{ secrets.EMAIL_USERNAME }}
#     #       password: ${{ secrets.EMAIL_PASSWORD }}
#     # # email subject
#     #       subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}
#     # # email body as text
#     #       body: ${{ github.job }} job in worflow ${{ github.workflow }} of ${{ github.repository }} has ${{ job.status }}
#     # # comma-separated string, send email to
#     #       to: Jyoti.Patil@nttdata.com
#     # # from email name
#     #       from: Jyoti